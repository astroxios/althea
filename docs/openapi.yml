openapi: 3.0.2
info:
  title: Althea API v1.0.4
  version: 1.0.4
  description: >-
    Althea is a portfolio project focused on creating a centralized platform for
    streamers and content creators.
  contact:
    url: 'https://github.com/astroxios/althea'
  license:
    name: GNU GPLv3
    url: 'https://www.gnu.org/licenses/gpl.txt'
servers:
  - url: 'https://althea.astroxios.com/api'
    description: Main (production) server
paths:
  /auth/register:
    summary: Path used to register a single User.
    description: >-
      The REST endpoint/path used to create a single `User` entity. This path
      contains a `POST` operation to perform the create task, respectively.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      tags:
        - Authentication
      responses:
        '201':
          $ref: '#/components/responses/Register'
        '400':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - {}
      operationId: createUser
      summary: Create a User
      description: Creates a new instance of `User`.
  /auth/login:
    summary: Path used to login a single User
    description: >-
      The REST endpoint/path used to login a single `User` entity. This path
      contains a `POST` operation to perform the login task, respectively.
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      tags:
        - Authentication
      responses:
        '200':
          $ref: '#/components/responses/Login'
        '400':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - {}
      operationId: loginUser
      summary: Login a User
      description: Logs in a `User` instance.
  /users:
    summary: Path used to manage the list of users.
    description: >-
      The REST endpoint/path used to list zero or more `User` entities. This
      path contains a `GET` operation to perform the list task, respectively.
    get:
      tags:
        - Users
      parameters:
        - name: ids
          description: 'The IDs of the users to retrieve, separated by commas (limit 100).'
          schema:
            type: array
            items:
              type: string
          in: query
          required: true
      responses:
        '200':
          $ref: '#/components/responses/GetUsers'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: getUsers
      summary: List All Users
      description: Gets a list of all `User` entities.
  '/users/{userId}':
    summary: Path used to manage multiple Users.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of
      an `User`.  This path contains `GET`, `PUT`, and `DELETE` operations used
      to perform the get, update, and delete tasks, respectively.
    get:
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/GetUser'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: getUser
      summary: Get a User
      description: Gets the details of a single instance of a `User`.
    delete:
      tags:
        - Users
      responses:
        '204':
          description: Successful response.
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: deleteUser
      summary: Delete a User
      description: Deletes an existing `User`.
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUser'
        required: true
      tags:
        - Users
      responses:
        '202':
          description: Successful response.
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: updateUser
      summary: Update a User
      description: Updates an existing `User`.
    parameters:
      - name: userId
        description: A unique identifier for a `User`.
        schema:
          type: string
        in: path
        required: true
  /widgets:
    summary: Path used to manage the list of widgets.
    description: >-
      The REST endpoint/path used to list and create zero or more `Widget`
      entities.  This path contains a `GET` and `POST` operation to perform the
      list and create tasks, respectively.
    get:
      tags:
        - Widgets
      parameters:
        - name: ids
          description: 'The IDs of the widgets to retrieve, separated by commas (limit 10).'
          schema:
            type: array
            items:
              type: string
          in: query
          required: true
      responses:
        '200':
          $ref: '#/components/responses/GetWidgets'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: getWidgets
      summary: List All Widgets
      description: Gets a list of all `Widget` entities.
    post:
      requestBody:
        description: A new `Widget` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WidgetRequest'
        required: true
      tags:
        - Widgets
      responses:
        '201':
          description: Successful response.
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: createWidget
      summary: Create a Widget
      description: Creates a new instance of a `Widget`.
  '/widgets/{widgetId}':
    get:
      tags:
        - Widgets
      parameters:
        - name: widgetId
          description: A unique identifier for a Widget.
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          $ref: '#/components/responses/GetWidget'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: getWidget
      summary: Get a Widget
      description: Gets the details of a single instance of a `Widget`.
    delete:
      tags:
        - Widgets
      parameters:
        - name: widgetId
          description: A unique identifier for a Widget.
          schema:
            type: string
          in: path
          required: true
      responses:
        '204':
          description: Successful response.
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: deleteWidget
      summary: Delete a Widget
      description: Deletes an existing `Widget`.
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchWidget'
        required: true
      tags:
        - Widgets
      parameters:
        - name: widgetId
          description: A unique identifier for a Widget.
          schema:
            type: string
          in: path
          required: true
      responses:
        '202':
          description: Successful response.
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: updateWidget
      summary: Update a Widget
      description: Updates an existing `Widget`.
    parameters:
      - name: widgetId
        description: A unique identifier for a Widget.
        schema:
          type: string
        in: path
        required: true
components:
  schemas:
    UserResource:
      description: ''
      required:
        - type
        - id
        - attributes
      type: object
      properties:
        type:
          type: string
        id:
          type: string
        attributes:
          required:
            - username
            - email
            - created
          type: object
          properties:
            avatar_url:
              format: uri
              type: string
            nickname:
              type: string
            username:
              type: string
            email:
              type: string
            created:
              format: date-time
              type: string
            updated:
              format: date-time
              type: string
      example:
        type: user
        id: '1802317729898692608'
        attributes:
          avatar_url: >-
            data:image/jpeg;charset=utf-8,https%3A%2F%2Frandomuser.me%2Fapi%2Fportraits%2Fmen%2F37.jpg
          nickname: jd213
          username: johndoe
          email: johndoe@example.com
          created: '2024-06-18T12:00:00Z'
          updated: '2024-06-18T12:00:00Z'
    RegisterRequest:
      description: ''
      required:
        - data
      type: object
      properties:
        data:
          required:
            - type
            - attributes
          type: object
          properties:
            type:
              type: string
            attributes:
              required:
                - username
                - email
                - password
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      example:
        data:
          type: user
          attributes:
            email: johndoe@example.com
            username: johndoe
            password: password123
    LoginRequest:
      description: ''
      required:
        - data
      type: object
      properties:
        data:
          required:
            - type
            - attributes
          type: object
          properties:
            type:
              type: string
            attributes:
              required:
                - email
                - password
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      example:
        data:
          type: user
          attributes:
            email: johndoe@example.com
            password: password123
    Error:
      required:
        - code
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: string
      example:
        code: '404'
        message: Resource not found
        details:
          - The requested resource was not found on this server.
          - Please check the request or contact support for assistance.
    GetUsers:
      description: ''
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserResource'
      example:
        data:
          - type: user
            id: '1802317729898692608'
            attributes:
              avatar_url: >-
                data:image/jpeg;charset=utf-8,https%3A%2F%2Frandomuser.me%2Fapi%2Fportraits%2Fmen%2F37.jpg
              nickname: jd213
              username: janedoe
              email: janedoe@example.com
              created: '2024-06-18T12:00:00Z'
              updated: '2024-06-18T12:00:00Z'
          - type: user
            id: '180231772922292608'
            attributes:
              avatar_url: >-
                data:image/jpeg;charset=utf-8,https%3A%2F%2Frandomuser.me%2Fapi%2Fportraits%2Fwomen%2F19.jpg
              nickname: jd123
              username: johndoe
              email: johndoe@example.com
              created: '2024-06-18T12:00:00Z'
              updated: '2024-06-18T12:00:00Z'
    GetUser:
      description: ''
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserResource'
      example:
        data:
          - type: user
            id: '1802317729898692608'
            attributes:
              avatar_url: >-
                data:image/jpeg;charset=utf-8,https%3A%2F%2Frandomuser.me%2Fapi%2Fportraits%2Fmen%2F37.jpg
              nickname: jd213
              username: janedoe
              email: janedoe@example.com
              created: '2024-06-18T12:00:00Z'
              updated: '2024-06-18T12:00:00Z'
    WidgetResource:
      description: ''
      required:
        - type
        - attributes
      type: object
      properties:
        type:
          type: string
        id:
          type: string
        attributes:
          required:
            - widget_type
          type: object
          properties:
            is_active:
              type: boolean
            widget_type:
              type: string
            created:
              format: datetime
              type: string
            updated:
              format: datetime
              type: string
      example:
        type: widget
        id: '1802317729898692608'
        attributes:
          is_active: true
          widget_type: Stream Schedule
          created: '2024-06-18T12:00:00Z'
          updated: '2024-06-18T12:00:00Z'
    GetWidget:
      description: ''
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/WidgetResource'
      example:
        data:
          - type: widget
            id: '1802317729898692608'
            attributes:
              is_active: true
              widget_type: Stream Schedule
              created: '2024-06-18T12:00:00Z'
              updated: '2024-06-18T12:00:00Z'
    GetWidgets:
      description: ''
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/WidgetResource'
      example:
        data:
          - type: widget
            id: '1802317729898692608'
            attributes:
              is_active: true
              widget_type: Stream Schedule
              created: '2024-06-18T12:00:00Z'
              updated: '2024-06-18T12:00:00Z'
          - type: widget
            id: '1802317722128692608'
            attributes:
              is_active: true
              widget_type: Community Polls
              created: '2024-06-18T12:00:00Z'
              updated: '2024-06-18T12:00:00Z'
    WidgetRequest:
      description: ''
      required:
        - data
      type: object
      properties:
        data:
          required:
            - type
            - attributes
          type: object
          properties:
            type:
              type: string
            attributes:
              required:
                - widget_type
              type: object
              properties:
                widget_type:
                  type: string
      example:
        data:
          type: widget
          attributes:
            widget_type: Stream Schedule
    PatchUser:
      description: ''
      type: object
      example:
        data:
          type: user
          attributes:
            avatar_url: >-
              data:image/jpeg;charset=utf-8,https%3A%2F%2Frandomuser.me%2Fapi%2Fportraits%2Fmen%2F37.jpg
            nickname: jd213
            username: johndoe
            email: johndoe@example.com
            updated: '2024-06-18T12:00:00Z'
    PatchWidget:
      description: ''
      type: object
      example:
        data:
          type: widget
          attributes:
            is_active: true
            updated: '2024-06-18T12:00:00Z'
  responses:
    Register:
      headers:
        Location:
          schema:
            type: string
          examples:
            Location of the new resource:
              value: 'https://althea.astroxios.com/users/1802317729898692608'
        Authorization:
          schema:
            type: string
          examples:
            access_token:
              value: >-
                Bearer
                eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJqb2huLmRvZTVAZXhhbXBsZS5jb20iLCJpYXQiOjE3MTgwNDM5MTgsImV4cCI6MTcxODA0NzUxOH0.qYTXIw6JtLQ8mFvO76KPYhOJLuMQz7yfGkuFqlI5IF4
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserResource'
      description: Successful response.
    Login:
      headers:
        Authorization:
          schema:
            type: string
          examples:
            access_token:
              value: >-
                Bearer
                eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJqb2huLmRvZTVAZXhhbXBsZS5jb20iLCJpYXQiOjE3MTgwNDM5MTgsImV4cCI6MTcxODA0NzUxOH0.qYTXIw6JtLQ8mFvO76KPYhOJLuMQz7yfGkuFqlI5IF4
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserResource'
      description: ''
    Error:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            400 Bad Request:
              value:
                code: '400'
                message: Bad Request
                details:
                  - >-
                    The server could not understand the request due to invalid
                    syntax.
                  - Please check the request and try again.
            401 Unauthorized:
              value:
                code: '401'
                message: Unauthorized
                details:
                  - The request requires user authentication.
                  - >-
                    Please provide valid authentication credentials and try
                    again.
            403 Forbidden:
              value:
                code: '403'
                message: Forbidden
                details:
                  - You do not have permission to access this resource.
                  - Contact support if you believe this is an error.
            404 Not Found:
              value:
                code: '404'
                message: Resource not found
                details:
                  - The requested resource was not found on this server.
                  - Please check the request or contact support for assistance.
            405 Method Not Allowed:
              value:
                code: '405'
                message: Method Not Allowed
                details:
                  - >-
                    The method specified in the request is not allowed for the
                    resource.
                  - Please check the request method and try again.
            406 Not Acceptable:
              value:
                code: '406'
                message: Not Acceptable
                details:
                  - >-
                    The requested resource is capable of generating only content
                    not acceptable according to the Accept headers sent in the
                    request.
                  - Please check the Accept headers and try again.
            409 Conflict:
              value:
                code: '409'
                message: Conflict
                details:
                  - >-
                    The request could not be completed due to a conflict with
                    the current state of the resource.
                  - Please check the request and try again.
            410 Gone:
              value:
                code: '410'
                message: Gone
                details:
                  - >-
                    The requested resource is no longer available at the server
                    and no forwarding address is known.
                  - Please contact support for assistance.
            415 Unsupported Media Type:
              value:
                code: '415'
                message: Unsupported Media Type
                details:
                  - >-
                    The server is refusing to service the request because the
                    payload is in a format not supported by this method.
                  - Please check the media type and try again.
            429 Too Many Requests:
              value:
                code: '429'
                message: Too Many Requests
                details:
                  - You have sent too many requests in a given amount of time.
                  - Please try again later or contact support if this continues.
            500 Internal Server Error:
              value:
                code: '500'
                message: Internal Server Error
                details:
                  - >-
                    The server encountered an unexpected condition which
                    prevented it from fulfilling the request.
                  - Please try again later or contact support.
            501 Not Implemented:
              value:
                code: '501'
                message: Not Implemented
                details:
                  - >-
                    The server does not support the functionality required to
                    fulfill the request.
                  - Please contact support for further assistance.
            502 Bad Gateway:
              value:
                code: '502'
                message: Bad Gateway
                details:
                  - >-
                    The server received an invalid response from the upstream
                    server.
                  - Please try again later or contact support.
            503 Service Unavailable:
              value:
                code: '503'
                message: Service Unavailable
                details:
                  - >-
                    The server is currently unable to handle the request due to
                    temporary overload or maintenance.
                  - Please try again later or contact support.
            504 Gateway Timeout:
              value:
                code: '504'
                message: Gateway Timeout
                details:
                  - >-
                    The server did not receive a timely response from the
                    upstream server or some other auxiliary server.
                  - Please try again later or contact support.
      description: ''
    GetUsers:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetUsers'
      description: ''
    GetUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetUser'
      description: ''
    GetWidget:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetWidget'
      description: ''
    GetWidgets:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetWidgets'
      description: ''
    CreateWidget:
      headers:
        Location:
          schema:
            type: string
          examples:
            Location of the new resource:
              value: 'https://althea.astroxios.com/widgets/1802317729898692608'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WidgetResource'
      description: ''
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
      description: JSON Web Token (JWT) used for Authentication
tags:
  - name: Authentication
    description: >-
      Operations related to user authentication, including registration and
      login.
  - name: Users
    description: >-
      Operations related to user management, including creating, retrieving,
      updating, and deleting users.
  - name: Widgets
    description: >-
      Operations related to widget management, including creating, retrieving,
      updating, and deleting widgets.
