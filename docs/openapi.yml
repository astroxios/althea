openapi: 3.0.2
info:
  title: Althea API v1.0.4
  version: 1.0.4
  description: >-
    Althea is a portfolio project focused on creating a centralized platform for
    streamers and content creators.
  contact:
    url: 'https://github.com/astroxios/althea'
  license:
    name: GNU GPLv3
    url: 'https://www.gnu.org/licenses/gpl.txt'
servers:
  - url: 'https://althea.astroxios.com/api'
    description: Main (production) server
paths:
  /auth/register:
    summary: Path used to register a single User.
    description: >-
      The REST endpoint/path used to create a single `User` entity. This path
      contains a `POST` operation to perform the create task, respectively.
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      tags:
        - Authentication
      responses:
        '201':
          $ref: '#/components/responses/Register'
        '400':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - {}
      operationId: createUser
      summary: Create a User
      description: Creates a new instance of `User`.
  /auth/login:
    summary: Path used to login a single User
    description: >-
      The REST endpoint/path used to login a single `User` entity. This path
      contains a `POST` operation to perform the login task, respectively.
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      tags:
        - Authentication
      responses:
        '200':
          $ref: '#/components/responses/Login'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - {}
      operationId: loginUser
      summary: Login a User
      description: Logs in a `User` instance.
  /users:
    summary: Path used to manage the list of users.
    description: >-
      The REST endpoint/path used to list zero or more `User` entities. This
      path contains a `GET` operation to perform the list task, respectively.
    get:
      tags:
        - Users
      parameters:
        - name: ids
          description: 'The IDs of the users to retrieve, separated by commas (limit 100).'
          schema:
            type: array
            items:
              type: string
          in: query
          required: true
      responses:
        '200':
          $ref: '#/components/responses/GetUsers'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: getUsers
      summary: List All Users
      description: Gets a list of all `User` entities.
  '/users/{userId}':
    summary: Path used to manage multiple Users.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of
      an `User`.  This path contains `GET`, `PUT`, and `DELETE` operations used
      to perform the get, update, and delete tasks, respectively.
    get:
      tags:
        - Users
      responses:
        '200':
          $ref: '#/components/responses/GetUser'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: getUser
      summary: Get a User
      description: Gets the details of a single instance of a `User`.
    delete:
      tags:
        - Users
      responses:
        '204':
          description: Successful response.
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: deleteUser
      summary: Delete a User
      description: Deletes an existing `User`.
    patch:
      tags:
        - Users
      responses:
        '202':
          description: Successful response.
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      operationId: updateUser
      summary: Update a User
      description: Updates an existing `User`.
    parameters:
      - name: userId
        description: A unique identifier for a `User`.
        schema:
          type: string
        in: path
        required: true
  /widgets:
    summary: Path used to manage the list of widgets.
    description: >-
      The REST endpoint/path used to list and create zero or more `Widget`
      entities.  This path contains a `GET` and `POST` operation to perform the
      list and create tasks, respectively.
    get:
      tags:
        - Widgets
      parameters:
        - name: ids
          description: 'The IDs of the widgets to retrieve, separated by commas (limit 10).'
          schema:
            type: array
            items:
              type: string
          in: query
          required: true
      responses:
        '200':
          $ref: '#/components/responses/GetWidgets'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: getWidgets
      summary: List All Widgets
      description: Gets a list of all `Widget` entities.
    post:
      requestBody:
        description: A new `Widget` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WidgetRequest'
        required: true
      tags:
        - Widgets
      responses:
        '201':
          description: Successful response.
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: createWidget
      summary: Create a Widget
      description: Creates a new instance of a `Widget`.
  '/widgets/{widgetId}':
    get:
      tags:
        - Widgets
      parameters:
        - name: widgetId
          description: A unique identifier for a Widget.
          schema:
            type: string
          in: path
          required: true
      responses:
        '200':
          $ref: '#/components/responses/GetWidget'
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: getWidget
      summary: Get a Widget
      description: Gets the details of a single instance of a `Widget`.
    delete:
      tags:
        - Widgets
      parameters:
        - name: widgetId
          description: A unique identifier for a Widget.
          schema:
            type: string
          in: path
          required: true
      responses:
        '204':
          description: Successful response.
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      operationId: deleteWidget
      summary: Delete a Widget
      description: Deletes an existing `Widget`.
    patch:
      tags:
        - Widgets
      parameters:
        - name: widgetId
          description: A unique identifier for a Widget.
          schema:
            type: string
          in: path
          required: true
      responses:
        '202':
          description: Successful response.
        '400':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
      security:
        - bearerAuth: []
      operationId: updateWidget
      summary: Update a Widget
      description: Updates an existing `Widget`.
    parameters:
      - name: widgetId
        description: A unique identifier for a Widget.
        schema:
          type: string
        in: path
        required: true
components:
  schemas:
    UserResource:
      description: ''
      required:
        - type
        - id
        - attributes
      type: object
      properties:
        type:
          type: string
        id:
          type: string
        attributes:
          required:
            - username
            - email
            - created
          type: object
          properties:
            avatar_url:
              format: uri
              type: string
            nickname:
              type: string
            username:
              type: string
            email:
              type: string
            created:
              format: date-time
              type: string
            updated:
              format: date-time
              type: string
      example:
        type: user
        id: '1802317729898692608'
        attributes:
          avatar_url: >-
            data:image/jpeg;charset=utf-8,https%3A%2F%2Frandomuser.me%2Fapi%2Fportraits%2Fmen%2F37.jpg
          nickname: jd213
          username: johndoe
          email: johndoe@example.com
          created: '2024-06-18T12:00:00Z'
          updated: '2024-06-18T12:00:00Z'
    RegisterRequest:
      description: ''
      required:
        - data
      type: object
      properties:
        data:
          required:
            - type
            - attributes
          type: object
          properties:
            type:
              type: string
            attributes:
              required:
                - username
                - email
                - password
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      example:
        data:
          type: user
          attributes:
            email: johndoe@example.com
            username: johndoe
            password: password123
    LoginRequest:
      description: ''
      required:
        - data
      type: object
      properties:
        data:
          required:
            - type
            - attributes
          type: object
          properties:
            type:
              type: string
            attributes:
              required:
                - email
                - password
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      example:
        data:
          type: user
          attributes:
            email: johndoe@example.com
            password: password123
    ErrorResource:
      description: ''
      required:
        - errors
      type: object
      properties:
        errors:
          type: array
          items:
            required:
              - id
              - code
              - status
              - title
              - detail
            type: object
            properties:
              id:
                description: >-
                  A unique identifier for this particular occurrence of the
                  problem.
                type: string
              code:
                description: >-
                  An application-specific error code, expressed as a string
                  value.
                type: string
              status:
                description: >-
                  The HTTP status code applicable to this problem, expressed as
                  a string value.
                type: string
              source:
                type: object
                properties:
                  pointer:
                    description: >-
                      A JSON Pointer [RFC6901] to the value in the request that
                      caused the error (e.g. primary data object or specific
                      attribute).
                    type: string
                  parameter:
                    description: >-
                      A string indicating which URI query parameter caused the
                      error.
                    type: string
                  header:
                    description: >-
                      A string indicating the name of a single request header
                      which caused the error.
                    type: string
                additionalProperties: false
              title:
                description: >-
                  A short, human-readable summary of the problem. It **SHOULD
                  NOT** change from occurrence to occurrence of the problem,
                  except for purposes of localization.
                type: string
              detail:
                description: >-
                  A human-readable explanation specific to this occurrence of
                  the problem.
                type: string
      example:
        errors:
          - id: '1802317729898692608'
            code: Internal server error
            status: '500'
            source:
              pointer: /data/attributes
              parameter: id
              header: Access-Control-Allow-Origin
            title: Error
            detail: >-
              We notified our engineers and hope to address this issue, as soon
              as possible.
          - id: '1802317729898692609'
            code: Invalid request
            status: '400'
            source:
              pointer: /data/attributes/name
              parameter: name
              header: Content-Type
            title: Validation Error
            detail: The 'name' attribute is required.
    GetUsers:
      description: ''
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserResource'
      example:
        data:
          - type: user
            id: '1802317729898692608'
            attributes:
              avatar_url: >-
                data:image/jpeg;charset=utf-8,https%3A%2F%2Frandomuser.me%2Fapi%2Fportraits%2Fmen%2F37.jpg
              nickname: jd213
              username: janedoe
              email: janedoe@example.com
              created: '2024-06-18T12:00:00Z'
              updated: '2024-06-18T12:00:00Z'
          - type: user
            id: '180231772922292608'
            attributes:
              avatar_url: >-
                data:image/jpeg;charset=utf-8,https%3A%2F%2Frandomuser.me%2Fapi%2Fportraits%2Fwomen%2F19.jpg
              nickname: jd123
              username: johndoe
              email: johndoe@example.com
              created: '2024-06-18T12:00:00Z'
              updated: '2024-06-18T12:00:00Z'
    GetUser:
      description: ''
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserResource'
      example:
        data:
          - type: user
            id: '1802317729898692608'
            attributes:
              avatar_url: >-
                data:image/jpeg;charset=utf-8,https%3A%2F%2Frandomuser.me%2Fapi%2Fportraits%2Fmen%2F37.jpg
              nickname: jd213
              username: janedoe
              email: janedoe@example.com
              created: '2024-06-18T12:00:00Z'
              updated: '2024-06-18T12:00:00Z'
    WidgetResource:
      description: ''
      required:
        - type
        - attributes
      type: object
      properties:
        type:
          type: string
        id:
          type: string
        attributes:
          required:
            - widget_type
          type: object
          properties:
            is_active:
              type: boolean
            widget_type:
              type: string
            created:
              format: datetime
              type: string
            updated:
              format: datetime
              type: string
      example:
        type: widget
        id: '1802317729898692608'
        attributes:
          is_active: true
          widget_type: Stream Schedule
          created: '2024-06-18T12:00:00Z'
          updated: '2024-06-18T12:00:00Z'
    GetWidget:
      description: ''
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/WidgetResource'
      example:
        data:
          - type: widget
            id: '1802317729898692608'
            attributes:
              is_active: true
              widget_type: Stream Schedule
              created: '2024-06-18T12:00:00Z'
              updated: '2024-06-18T12:00:00Z'
    GetWidgets:
      description: ''
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/WidgetResource'
      example:
        data:
          - type: widget
            id: '1802317729898692608'
            attributes:
              is_active: true
              widget_type: Stream Schedule
              created: '2024-06-18T12:00:00Z'
              updated: '2024-06-18T12:00:00Z'
          - type: widget
            id: '1802317722128692608'
            attributes:
              is_active: true
              widget_type: Community Polls
              created: '2024-06-18T12:00:00Z'
              updated: '2024-06-18T12:00:00Z'
    WidgetRequest:
      description: ''
      required:
        - data
      type: object
      properties:
        data:
          required:
            - type
            - attributes
          type: object
          properties:
            type:
              type: string
            attributes:
              required:
                - widget_type
              type: object
              properties:
                widget_type:
                  type: string
      example:
        data:
          type: widget
          attributes:
            widget_type: Stream Schedule
  responses:
    Register:
      headers:
        Location:
          schema:
            type: string
          examples:
            Location of the new resource:
              value: 'https://althea.astroxios.com/users/1802317729898692608'
        Authorization:
          schema:
            type: string
          examples:
            access_token:
              value: >-
                Bearer
                eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJqb2huLmRvZTVAZXhhbXBsZS5jb20iLCJpYXQiOjE3MTgwNDM5MTgsImV4cCI6MTcxODA0NzUxOH0.qYTXIw6JtLQ8mFvO76KPYhOJLuMQz7yfGkuFqlI5IF4
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserResource'
      description: Successful response.
    Login:
      headers:
        Authorization:
          schema:
            type: string
          examples:
            access_token:
              value: >-
                Bearer
                eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJqb2huLmRvZTVAZXhhbXBsZS5jb20iLCJpYXQiOjE3MTgwNDM5MTgsImV4cCI6MTcxODA0NzUxOH0.qYTXIw6JtLQ8mFvO76KPYhOJLuMQz7yfGkuFqlI5IF4
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserResource'
      description: ''
    Error:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResource'
      description: ''
    GetUsers:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetUsers'
      description: ''
    GetUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetUser'
      description: ''
    GetWidget:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetWidget'
      description: ''
    GetWidgets:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GetWidgets'
      description: ''
    CreateWidget:
      headers:
        Location:
          schema:
            type: string
          examples:
            Location of the new resource:
              value: 'https://althea.astroxios.com/widgets/1802317729898692608'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/WidgetResource'
      description: ''
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
      description: JSON Web Token (JWT) used for Authentication
tags:
  - name: Authentication
    description: >-
      Operations related to user authentication, including registration and
      login.
  - name: Users
    description: >-
      Operations related to user management, including creating, retrieving,
      updating, and deleting users.
  - name: Widgets
    description: >-
      Operations related to widget management, including creating, retrieving,
      updating, and deleting widgets.
