openapi: '3.0.2'
info:
  title: Althea API
  version: '1.0'
  description: Althea is a portfolio project focused on creating a centralized platform for streamers and content creators.
  license:
    name: GNU GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
servers:
  - url: https://althea.astroxios.com/api
    description: Main (production) server
tags:
  - name: Authentication
    description: Operations related to user authentication, including registration, login, logout, and token refresh.
  - name: Users
    description: Operations related to user management, including creating, retrieving, updating, and deleting user profiles.
  - name: Widgets
    description: Operations related to widget management, including creating, retrieving, updating, and deleting widgets.
paths:
  /users/register:
    post:
      operationId: registerUser
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A human-readable message describing the error.
              examples:
                Email:
                  value:
                    error:
                      Email already exists
                Username:
                  value:
                    error:
                      Username already exists
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500 Internal Server Error"
  /auth/login:
    post:
      operationId: loginUser
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500 Internal Server Error"
  /users/{user.id}:
    get:
      operationId: getUser
      summary: Retrieve a user
      security:
        - bearerAuth: []
      tags:
        - Users
      parameters:
        - in: path
          name: user.id
          required: true
          description: The ID of the user to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User retrieval successful
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500 Internal Server Error"
    patch:
      operationId: updateUser
      summary: Update a user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user.id
          required: true
          description: The ID of the user to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User update successful
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500 Internal Server Error"
    delete:
      operationId: deleteUser
      summary: Delete a user
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user.id
          required: true
          description: The ID of the user to delete
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
  /users:
    get:
      operationId: getUsers
      summary: Retrieve multiple users
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: ids
          required: true
          description: The IDs of the users to retrieve, separated by commas (limit 100)
          schema:
            type: array
            items:
              type: integer
            format: csv
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User retrieval successful
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              examples:
                Parameter:
                  value:
                    error: Parameter 'ids' are required
                Fields:
                  value:
                    error:
                      Invalid 'ids' parameter. Must be a comma-separated list of numbers.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500 Internal Server Error"
  /widgets:
    get:
      operationId: getWidgets
      summary: Retrieve multiple widgets
      description: Retrieves a list of widgets created by the currently authenticated user (requires JWT auth).
      tags:
        - Widgets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Widget retrieval successful
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Widget"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Widgets not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500 Internal Server Error"
    post:
      operationId: createWidget
      summary: Create a new widget
      description: Creates a new widget for the currently authenticated user (requires JWT auth).
      tags:
        - Widgets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWidgetRequest"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Widget creation successful
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Widget"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500 Internal Server Error"
    patch:
      operationId: updateWidget
      summary: Update a widget
      description: Updates an existing widget for the currently authenticated user (requires JWT auth).
      tags:
        - Widgets
      responses:
        '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Widget update successful
                    data:
                      type: array
                      items:
                        $ref: "#/components/schemas/UpdateWidgetResponse"
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Widget not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500 Internal Server Error"
    delete:
      operationId: deleteWidget
      summary: Delete a widget
      description: Deletes a widget with the specified ID.
      tags:
        - Widgets
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: widget.id
          required: true
          description: The ID of the widget to delete
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Widget not found
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          format: username
          minLength: 3
          maxLength: 20
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 64
    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: User registration successful
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 1
              username:
                type: string
                format: username
                example: username
              access_token:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJqb2huLmRvZTVAZXhhbXBsZS5jb20iLCJpYXQiOjE3MTgwNDM5MTgsImV4cCI6MTcxODA0NzUxOH0.qYTXIw6JtLQ8mFvO76KPYhOJLuMQz7yfGkuFqlI5IF4
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          maxLength: 320
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 64
          example: password123
    RefreshRequest:
      type: object
      properties:
        refreshToken:
          type: string
          description: The refresh token to be used for obtaining a new access token
    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: User login successful
        data:
          type: array
          items:
            type: object
            properties:
              access_token:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJqb2huLmRvZTVAZXhhbXBsZS5jb20iLCJpYXQiOjE3MTgwNDM5MTgsImV4cCI6MTcxODA0NzUxOH0.qYTXIw6JtLQ8mFvO76KPYhOJLuMQz7yfGkuFqlI5IF4
    LogoutRequest:
      type: object
      properties:
        access_token:
          type: string
          description: The access token to be revoked during logout
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          format: username
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        username:
          type: string
          format: username
          minLength: 3
          maxLength: 20
          example: username
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 64
          example: password
    Error:
      type: object
      properties:
        error:
          type: string
          description: A human-readable message describing the error.
    500 Internal Server Error:
      type: object
      properties:
        error:
          type: string
          description: A human-readable message describing the error.
          example: Internal Server Error
    CreateWidgetRequest:
      type: object
      properties:
        widget_type:
          type: string
          example: Stream Schedule
    Widget:
      type: object
      properties:
        id:
          type: integer
          format: int64
        widget_type:
          type: string
          example: Stream Schedule
        createdAt:
          type: string
          format: date-time
    UpdateWidgetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        widget_type:
          type: string
          example: Stream Schedule
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
